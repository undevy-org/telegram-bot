# Deploy Pipeline for Telegram Bot
# Location: .github/workflows/deploy.yml
# Purpose: Deploy bot to production using a reliable file-based key auth

name: Deploy Bot

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment package
        run: |
          echo "ðŸ“¦ Creating deployment package..."
          # Create a tar archive of all necessary files
          tar -czf /tmp/bot-deploy.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='.github' \
            --exclude='*.log' \
            .
          echo "âœ… Package created: $(du -h /tmp/bot-deploy.tar.gz | cut -f1)"
      
      # It writes the SSH key to a file instead of passing it as a variable.
      - name: Transfer package to server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "ðŸ”‘ Setting up SSH key file..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add server to known hosts to avoid interactive prompts
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts 2>/dev/null
          
          echo "ðŸ“¤ Transferring bot package to server..."
          scp -i ~/.ssh/deploy_key /tmp/bot-deploy.tar.gz $SSH_USER@$SSH_HOST:/tmp/
          
          echo "âœ… Package transferred successfully."

      # This step now only executes commands, auth is already done.
      - name: Deploy and restart bot on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} 
          script: |
            set -e
            
            echo "ðŸ”§ Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            BOT_PATH="${{ secrets.DEPLOY_PATH_BOT }}"
            
            echo "ðŸš€ Starting deployment on server..."
            
            # Backup .env if it exists
            if [ -f "$BOT_PATH/.env" ]; then
              echo "ðŸ’¾ Backing up .env file..."
              cp "$BOT_PATH/.env" /tmp/bot-env-backup-$(date +%s)
            fi
            
            # Create a new directory for the release
            RELEASE_PATH="$BOT_PATH-$(date +%Y%m%d%H%M%S)"
            mkdir -p "$RELEASE_PATH"
            
            echo "ðŸ“¦ Extracting bot files to $RELEASE_PATH..."
            tar -xzf /tmp/bot-deploy.tar.gz -C "$RELEASE_PATH"
            
            # Restore .env
            if [ -f /tmp/bot-env-backup-$(date +%s) ]; then
              cp /tmp/bot-env-backup-$(date +%s) "$RELEASE_PATH/.env"
            fi
            
            echo "ðŸ”— Linking new release..."
            rm -rf "$BOT_PATH"
            ln -sfn "$RELEASE_PATH" "$BOT_PATH"
            
            cd "$BOT_PATH"
            echo "ðŸ“¦ Installing production dependencies..."
            npm ci --omit=dev || npm install --production
            
            # Restart bot via PM2
            APP="${{ secrets.PM2_APP_NAME_BOT }}"
            echo "ðŸ”„ Restarting PM2 process: $APP..."
            if pm2 describe "$APP" >/dev/null 2>&1; then
              pm2 restart "$APP"
            else
              pm2 start bot.js --name "$APP"
            fi
            
            pm2 save
            
            # Cleanup
            echo "ðŸ§¹ Cleaning up old releases and temporary files..."
            rm /tmp/bot-deploy.tar.gz
            rm /tmp/bot-env-backup-*
            # Keep the last 3 releases
            ls -dt $BOT_PATH-* 2>/dev/null | tail -n +4 | xargs rm -rf
            
            echo "âœ… Bot deployment complete!"