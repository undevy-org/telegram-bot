# Deploy Pipeline for Telegram Bot - DEBUG VERSION
# Location: .github/workflows/deploy.yml
# Purpose: Deploy bot with extensive debugging

name: Deploy Bot

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Test SSH connection first
      - name: Test SSH Connection
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "âœ… SSH Connection successful!"
            echo "User: $(whoami)"
            echo "Directory: $(pwd)"
            echo "Server: $(hostname)"
            
      # If SSH works, continue with deployment
      - name: Create deployment package
        run: |
          echo "ðŸ“¦ Creating deployment package..."
          tar -czf /tmp/bot-deploy.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='.github' \
            --exclude='*.log' \
            .
          echo "âœ… Package created: $(du -h /tmp/bot-deploy.tar.gz | cut -f1)"
      
      # Transfer using SCP action (simpler than manual)
      - name: Transfer files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "/tmp/bot-deploy.tar.gz"
          target: "/tmp"
          strip_components: 1
      
      # Deploy on server
      - name: Deploy and restart bot
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            
            echo "ðŸ”§ Setting up deployment..."
            
            # Setup Node
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            BOT_PATH="${{ secrets.DEPLOY_PATH_BOT }}"
            
            # Backup important files
            if [ -f "$BOT_PATH/.env" ]; then
              echo "ðŸ’¾ Backing up .env..."
              cp "$BOT_PATH/.env" /tmp/bot-env-backup
            fi
            
            # Create new deployment directory
            NEW_PATH="$BOT_PATH-new"
            rm -rf "$NEW_PATH"
            mkdir -p "$NEW_PATH"
            
            # Extract files
            echo "ðŸ“¦ Extracting bot files..."
            tar -xzf /tmp/bot-deploy.tar.gz -C "$NEW_PATH"
            
            # Restore .env
            if [ -f /tmp/bot-env-backup ]; then
              cp /tmp/bot-env-backup "$NEW_PATH/.env"
            fi
            
            # Swap directories
            if [ -d "$BOT_PATH" ]; then
              mv "$BOT_PATH" "$BOT_PATH-old-$(date +%s)"
            fi
            mv "$NEW_PATH" "$BOT_PATH"
            
            # Install dependencies
            cd "$BOT_PATH"
            npm ci --omit=dev || npm install --production
            
            # Restart bot
            APP="${{ secrets.PM2_APP_NAME_BOT }}"
            if pm2 describe "$APP" >/dev/null 2>&1; then
              pm2 restart "$APP"
            else
              pm2 start bot.js --name "$APP"
            fi
            
            pm2 save
            
            echo "âœ… Bot deployed successfully!"