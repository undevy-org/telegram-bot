# Deploy Pipeline for Telegram Bot - ROBUST VERSION
# Location: .github/workflows/deploy.yml
# Purpose: Deploy bot using atomic symlinks and a shared .env file

name: Deploy Bot

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment package
        run: |
          echo "📦 Creating deployment package..."
          tar -czf /tmp/bot-deploy.tar.gz \
            --exclude='.git' --exclude='node_modules' --exclude='.env' \
            --exclude='.github' --exclude='*.log' .
          echo "✅ Package created"
      
      - name: Transfer package to server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "🔑 Setting up SSH key file..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts 2>/dev/null
          
          echo "📤 Transferring bot package to server..."
          scp -i ~/.ssh/deploy_key /tmp/bot-deploy.tar.gz $SSH_USER@$SSH_HOST:/tmp/
          echo "✅ Package transferred."

      - name: Deploy and restart bot on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} 
          script: |
            set -e
            
            echo "🔧 Setting up Node environment..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # --- MODIFIED: Define paths for releases and shared files ---
            APP_DIR="${{ secrets.DEPLOY_PATH_BOT }}"
            RELEASES_DIR="$APP_DIR/releases"
            SHARED_DIR="$APP_DIR/shared"
            RELEASE_PATH="$RELEASES_DIR/$(date +%Y%m%d%H%M%S)"
            
            echo "🚀 Starting deployment on server..."
            
            # --- MODIFIED: Create shared directory for persistent files ---
            echo "📁 Ensuring shared directory exists..."
            mkdir -p "$RELEASES_DIR"
            mkdir -p "$SHARED_DIR"
            
            # --- NEW: Create a placeholder .env if it doesn't exist ---
            if [ ! -f "$SHARED_DIR/.env" ]; then
              echo "⚠️ .env file not found in shared directory. Creating a placeholder."
              echo "# Please fill this file with your bot's environment variables" > "$SHARED_DIR/.env"
              echo "TELEGRAM_BOT_TOKEN=" >> "$SHARED_DIR/.env"
            fi
            
            echo "📦 Creating new release directory: $RELEASE_PATH"
            mkdir -p "$RELEASE_PATH"
            
            echo "📦 Extracting bot files..."
            tar -xzf /tmp/bot-deploy.tar.gz -C "$RELEASE_PATH"
            
            # --- MODIFIED: Link the shared .env file into the new release ---
            echo "🔗 Linking shared .env file..."
            ln -sfn "$SHARED_DIR/.env" "$RELEASE_PATH/.env"
            
            cd "$RELEASE_PATH"
            echo "📦 Installing production dependencies..."
            npm ci --omit=dev || npm install --production
            
            # --- MODIFIED: Atomically switch the 'current' symlink ---
            echo "🔗 Activating new release..."
            ln -sfn "$RELEASE_PATH" "$APP_DIR/current"
            
            # Restart bot via PM2
            APP_NAME="${{ secrets.PM2_APP_NAME_BOT }}"
            # --- MODIFIED: Point PM2 to the 'current' symlink ---
            PM2_ECOSYSTEM_FILE="$SHARED_DIR/ecosystem.config.js"

            # Create a PM2 ecosystem file for reliability
            echo "module.exports = { apps: [{ name: '$APP_NAME', script: '$APP_DIR/current/bot.js', watch: false, restart_delay: 5000 }] };" > $PM2_ECOSYSTEM_FILE

            echo "🔄 Restarting PM2 process: $APP_NAME..."
            pm2 startOrRestart $PM2_ECOSYSTEM_FILE
            
            pm2 save
            
            # Cleanup
            echo "🧹 Cleaning up old releases and temporary files..."
            rm -f /tmp/bot-deploy.tar.gz
            # Keep the last 3 releases
            ls -dt $RELEASES_DIR/* 2>/dev/null | tail -n +4 | xargs rm -rf
            
            echo "✅ Bot deployment complete!"