diff --git a/handlers/actionHandlers.js b/handlers/actionHandlers.js
index 5deb370..212a443 100644
--- a/handlers/actionHandlers.js
+++ b/handlers/actionHandlers.js
@@ -1,5 +1,6 @@
 const { withErrorHandling } = require('./errors');
 const { EMOJI } = require('../config/constants');
+const { escapeMarkdown } = require('../utils/format');
 
 // Import all command handlers
 const contentCommands = require('../commands/content');
@@ -46,12 +47,13 @@ const actionHandlerMap = {
  */
 function createEditCaseHandler() {
   return withErrorHandling(async (ctx) => {
-    await ctx.reply(
-      `‚úèÔ∏è *Edit Case Study*\n\n` +
-      `Please enter the case ID you want to edit:\n\n` +
-      `üí° Use /list_cases to see all available cases`,
-      { parse_mode: 'MarkdownV2' }
-    );
+    const message = `‚úèÔ∏è *Edit Case Study*
+
+Please enter the case ID you want to edit:
+
+üí° Use /list\\_cases to see all available cases`;
+    
+    await ctx.reply(message, { parse_mode: 'MarkdownV2' });
     
     // Set a temporary state to capture the next message as case ID
     const stateManager = require('../stateManager');
@@ -71,13 +73,14 @@ function createEditCaseHandler() {
  */
 function createDeleteCaseHandler() {
   return withErrorHandling(async (ctx) => {
-    await ctx.reply(
-      `üóëÔ∏è *Delete Case Study*\n\n` +
-      `Please enter the case ID you want to delete:\n\n` +
-      `‚ö†Ô∏è This action cannot be undone!\n` +
-      `üí° Use /list_cases to see all available cases`,
-      { parse_mode: 'MarkdownV2' }
-    );
+    const message = `üóëÔ∏è *Delete Case Study*
+
+Please enter the case ID you want to delete:
+
+‚ö†Ô∏è This action cannot be undone\\!
+üí° Use /list\\_cases to see all available cases`;
+    
+    await ctx.reply(message, { parse_mode: 'MarkdownV2' });
     
     // Set a temporary state to capture the next message as case ID
     const stateManager = require('../stateManager');
@@ -97,12 +100,13 @@ function createDeleteCaseHandler() {
  */
 function createPreviewHandler() {
   return withErrorHandling(async (ctx) => {
-    await ctx.reply(
-      `üëÅÔ∏è *Preview Case Study*\n\n` +
-      `Please enter the case ID you want to preview:\n\n` +
-      `üí° Use /list_cases to see all available cases`,
-      { parse_mode: 'MarkdownV2' }
-    );
+    const message = `üëÅÔ∏è *Preview Case Study*
+
+Please enter the case ID you want to preview:
+
+üí° Use /list\\_cases to see all available cases`;
+    
+    await ctx.reply(message, { parse_mode: 'MarkdownV2' });
     
     // Set a temporary state to capture the next message as case ID
     const stateManager = require('../stateManager');
@@ -122,12 +126,13 @@ function createPreviewHandler() {
  */
 function createRollbackHandler() {
   return withErrorHandling(async (ctx) => {
-    await ctx.reply(
-      `‚Ü©Ô∏è *Rollback to Previous Version*\n\n` +
-      `Please enter the version number to rollback to:\n\n` +
-      `üí° Use the System Tools ‚Üí Version History to see available versions`,
-      { parse_mode: 'MarkdownV2' }
-    );
+    const message = `‚Ü©Ô∏è *Rollback to Previous Version*
+
+Please enter the version number to rollback to:
+
+üí° Use the System Tools ‚Üí Version History to see available versions`;
+    
+    await ctx.reply(message, { parse_mode: 'MarkdownV2' });
     
     // Set a temporary state to capture the next message as version number
     const stateManager = require('../stateManager');
diff --git a/handlers/navigation.js b/handlers/navigation.js
index 4bf371d..46a186a 100644
--- a/handlers/navigation.js
+++ b/handlers/navigation.js
@@ -278,13 +278,8 @@ class NavigationHandler {
       return;
     }
     
-    // Convert nav callback to act callback format and execute through action handler
-    const actionCallbackData = `act_${category}_${action}`;
-    const success = await executeActionHandler(actionCallbackData, ctx);
-    
-    if (!success) {
-      console.warn(`[NAVIGATION] Failed to execute action: ${actionCallbackData}`);
-    }
+    // Direct execution for non-destructive actions
+    await this.executeAction(ctx, userId, category, action);
   }
 
   /**
